/**
 * Script de verificaci√≥n r√°pida para confirmar que la soluci√≥n de URL de redirecci√≥n funciona
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.production' });

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const SITE_URL = process.env.NEXT_PUBLIC_SITE_URL;

function showHeader() {
  console.log('üîç VERIFICACI√ìN DE SOLUCI√ìN - URL DE REDIRECCI√ìN');
  console.log('=' .repeat(55));
  console.log();
}

function checkEnvironmentVariables() {
  console.log('üìã 1. VERIFICANDO VARIABLES DE ENTORNO...');
  
  const checks = [
    { name: 'NEXT_PUBLIC_SUPABASE_URL', value: SUPABASE_URL, expected: 'https://smirsvavqrhqwzflhbwg.supabase.co' },
    { name: 'NEXT_PUBLIC_SITE_URL', value: SITE_URL, expected: 'https://micuenta.orpainversiones.com' },
    { name: 'SUPABASE_SERVICE_ROLE_KEY', value: SUPABASE_SERVICE_KEY ? '‚úì Configurada' : '‚úó Faltante', expected: '‚úì Configurada' }
  ];
  
  let allGood = true;
  
  checks.forEach(check => {
    const status = check.value === check.expected ? '‚úÖ' : '‚ùå';
    console.log(`  ${status} ${check.name}: ${check.value}`);
    if (check.value !== check.expected) {
      allGood = false;
      console.log(`      Esperado: ${check.expected}`);
    }
  });
  
  console.log();
  return allGood;
}

function checkRedirectUrl() {
  console.log('üîó 2. VERIFICANDO URL DE REDIRECCI√ìN...');
  
  const expectedUrl = `${SITE_URL}/auth/reset-password`;
  console.log(`  üìç URL de redirecci√≥n: ${expectedUrl}`);
  
  if (SITE_URL === 'https://micuenta.orpainversiones.com') {
    console.log('  ‚úÖ URL corregida correctamente');
    return true;
  } else {
    console.log('  ‚ùå URL incorrecta');
    console.log('      Debe ser: https://micuenta.orpainversiones.com');
    return false;
  }
}

async function testSupabaseConnection() {
  console.log('üîå 3. PROBANDO CONEXI√ìN A SUPABASE...');
  
  try {
    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);
    
    // Probar una consulta simple
    const { data, error } = await supabase.from('usuarios').select('count').limit(1);
    
    if (error && !error.message.includes('relation "usuarios" does not exist')) {
      console.log('  ‚ùå Error de conexi√≥n:', error.message);
      return false;
    }
    
    console.log('  ‚úÖ Conexi√≥n exitosa');
    return true;
  } catch (err) {
    console.log('  ‚ùå Error de conexi√≥n:', err.message);
    return false;
  }
}

async function testEmailReset() {
  console.log('üìß 4. PROBANDO ENV√çO DE EMAIL DE RECUPERACI√ìN...');
  
  const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);
  const testEmail = 'test@orpainversiones.com'; // Email de prueba
  
  try {
    const { data, error } = await supabase.auth.resetPasswordForEmail(testEmail, {
      redirectTo: `${SITE_URL}/auth/reset-password`,
    });
    
    if (error) {
      console.log('  ‚ùå Error al enviar email:', error.message);
      
      // Analizar el tipo de error
      if (error.message.includes('Invalid redirect URL')) {
        console.log('  üö® PROBLEMA: URL de redirecci√≥n no autorizada en Supabase');
        console.log('      Soluci√≥n: Agregar la URL en Supabase Dashboard > Authentication > URL Configuration');
      } else if (error.message.includes('Email address not authorized')) {
        console.log('  ‚ö†Ô∏è  ADVERTENCIA: Usando SMTP por defecto (limitado a miembros del equipo)');
        console.log('      Esto es normal si el email de prueba no es miembro del equipo');
      } else if (error.message.includes('rate limit')) {
        console.log('  ‚ö†Ô∏è  ADVERTENCIA: L√≠mite de rate alcanzado');
        console.log('      Esto es normal, indica que el sistema est√° funcionando');
      }
      
      return false;
    } else {
      console.log('  ‚úÖ Email enviado exitosamente');
      return true;
    }
  } catch (err) {
    console.log('  ‚ùå Error inesperado:', err.message);
    return false;
  }
}

function showNextSteps(envOk, urlOk, connectionOk, emailOk) {
  console.log('üìù PR√ìXIMOS PASOS:');
  console.log();
  
  if (!envOk) {
    console.log('‚ùå 1. Corregir variables de entorno en .env.production');
  } else {
    console.log('‚úÖ 1. Variables de entorno correctas');
  }
  
  if (!urlOk) {
    console.log('‚ùå 2. Corregir NEXT_PUBLIC_SITE_URL');
  } else {
    console.log('‚úÖ 2. URL de sitio correcta');
  }
  
  if (!connectionOk) {
    console.log('‚ùå 3. Verificar conexi√≥n a Supabase');
  } else {
    console.log('‚úÖ 3. Conexi√≥n a Supabase exitosa');
  }
  
  console.log();
  console.log('üîß ACCIONES REQUERIDAS EN SUPABASE DASHBOARD:');
  console.log('1. Ve a: https://supabase.com/dashboard/project/smirsvavqrhqwzflhbwg/auth/url-configuration');
  console.log('2. Agregar en "Redirect URLs":');
  console.log('   - https://micuenta.orpainversiones.com/**');
  console.log('   - https://micuenta.orpainversiones.com/auth/reset-password');
  console.log('3. Verificar SMTP personalizado en: Authentication > Settings > SMTP Settings');
  
  console.log();
  console.log('üîÑ DESPU√âS DE LOS CAMBIOS:');
  console.log('1. Reiniciar la aplicaci√≥n');
  console.log('2. Probar el flujo de recuperaci√≥n de contrase√±a');
  console.log('3. Ejecutar: npm run verify-fix');
}

async function main() {
  showHeader();
  
  const envOk = checkEnvironmentVariables();
  const urlOk = checkRedirectUrl();
  const connectionOk = await testSupabaseConnection();
  const emailOk = await testEmailReset();
  
  console.log();
  console.log('üìä RESUMEN:');
  console.log(`Variables de entorno: ${envOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`URL de redirecci√≥n: ${urlOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`Conexi√≥n Supabase: ${connectionOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`Env√≠o de email: ${emailOk ? '‚úÖ' : '‚ùå'}`);
  
  console.log();
  
  if (envOk && urlOk && connectionOk) {
    console.log('üéâ CONFIGURACI√ìN BASE CORRECTA');
    console.log('Si el env√≠o de email fall√≥, probablemente necesitas configurar las URLs en Supabase Dashboard.');
  } else {
    console.log('‚ö†Ô∏è  CONFIGURACI√ìN INCOMPLETA');
    console.log('Revisa los elementos marcados con ‚ùå arriba.');
  }
  
  console.log();
  showNextSteps(envOk, urlOk, connectionOk, emailOk);
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { checkEnvironmentVariables, checkRedirectUrl, testSupabaseConnection, testEmailReset };