require('dotenv').config({ path: '.env.production' })
const nodemailer = require('nodemailer')
const crypto = require('crypto')

// Funciones auxiliares para simular el servicio
function generateToken() {
  return crypto.randomBytes(32).toString('hex')
}

async function testSMTPConnection(config) {
  const transporter = nodemailer.createTransport({
    host: config.host,
    port: parseInt(config.port),
    secure: parseInt(config.port) === 465,
    auth: {
      user: config.user,
      pass: config.pass
    }
  })
  
  try {
    await transporter.verify()
    return { success: true }
  } catch (error) {
    return { success: false, error: error.message }
  }
}

async function testDirectEmailService() {
  console.log('üß™ Iniciando pruebas del servicio de email directo...\n')
  
  try {
    // 1. Verificar configuraci√≥n SMTP
    console.log('1Ô∏è‚É£ Verificando configuraci√≥n SMTP...')
    const smtpConfig = {
      host: process.env.SMTP_HOST,
      port: process.env.SMTP_PORT,
      user: process.env.SMTP_USER,
      pass: process.env.SMTP_PASS,
      from: process.env.NEXT_PUBLIC_SUPPORT_EMAIL
    }
    
    console.log('   üìß Host SMTP:', smtpConfig.host || '‚ùå No configurado')
    console.log('   üîå Puerto:', smtpConfig.port || '‚ùå No configurado')
    console.log('   üë§ Usuario:', smtpConfig.user ? '‚úÖ Configurado' : '‚ùå No configurado')
    console.log('   üîë Contrase√±a:', smtpConfig.pass ? '‚úÖ Configurado' : '‚ùå No configurado')
    console.log('   üì® Email origen:', smtpConfig.from || '‚ùå No configurado')
    
    if (!smtpConfig.host || !smtpConfig.port || !smtpConfig.user || !smtpConfig.pass || !smtpConfig.from) {
      console.log('\n‚ùå Configuraci√≥n SMTP incompleta. Verifica las variables de entorno:')
      console.log('   - SMTP_HOST')
      console.log('   - SMTP_PORT')
      console.log('   - SMTP_USER')
      console.log('   - SMTP_PASS')
      console.log('   - NEXT_PUBLIC_SUPPORT_EMAIL')
      return
    }
    
    console.log('   ‚úÖ Configuraci√≥n SMTP completa\n')
    
    // 2. Probar conexi√≥n SMTP
    console.log('2Ô∏è‚É£ Probando conexi√≥n SMTP...')
    try {
      const connectionTest = await testSMTPConnection(smtpConfig)
      if (connectionTest.success) {
        console.log('   ‚úÖ Conexi√≥n SMTP exitosa')
      } else {
        console.log('   ‚ùå Error en conexi√≥n SMTP:', connectionTest.error)
        return
      }
    } catch (error) {
      console.log('   ‚ùå Error al probar conexi√≥n SMTP:', error.message)
      return
    }
    
    console.log('')
    
    // 3. Generar token de prueba
    console.log('3Ô∏è‚É£ Generando token de prueba...')
    const testEmail = 'test@example.com'
    const token = generateToken()
    console.log('   ‚úÖ Token generado:', token.substring(0, 20) + '...')
    console.log('')
    
    // 4. Probar env√≠o de email
    console.log('4Ô∏è‚É£ Probando env√≠o de email de prueba...')
    try {
      const transporter = nodemailer.createTransport({
        host: smtpConfig.host,
        port: parseInt(smtpConfig.port),
        secure: parseInt(smtpConfig.port) === 465,
        auth: {
          user: smtpConfig.user,
          pass: smtpConfig.pass
        }
      })
      
      const resetUrl = `${process.env.NEXT_PUBLIC_SITE_URL}/auth/reset-password-direct?token=${token}&email=${encodeURIComponent(testEmail)}`
      
      const mailOptions = {
        from: smtpConfig.from,
        to: smtpConfig.from, // Enviar a nosotros mismos para prueba
        subject: '[PRUEBA] Recuperaci√≥n de Contrase√±a - ORPA',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #333;">üß™ Email de Prueba - Recuperaci√≥n de Contrase√±a</h2>
            <p>Este es un email de prueba del sistema de recuperaci√≥n directo.</p>
            <p><strong>Token:</strong> ${token.substring(0, 20)}...</p>
            <p><strong>URL de reset:</strong> <a href="${resetUrl}">${resetUrl}</a></p>
            <p style="color: #666; font-size: 12px;">Este es un email de prueba generado autom√°ticamente.</p>
          </div>
        `
      }
      
      await transporter.sendMail(mailOptions)
      console.log('   ‚úÖ Email de prueba enviado exitosamente')
    } catch (error) {
      console.log('   ‚ö†Ô∏è  Error al enviar email de prueba:', error.message)
      console.log('   ‚ÑπÔ∏è  Esto no afecta la funcionalidad, solo la prueba de env√≠o')
    }
    
    console.log('')
    
    console.log('üéâ Pruebas del servicio directo completadas!')
    console.log('')
    console.log('üìã Pr√≥ximos pasos:')
    console.log('   1. Configura las variables SMTP en tu archivo .env.production')
    console.log('   2. Reinicia tu aplicaci√≥n')
    console.log('   3. Prueba el flujo completo desde la interfaz web')
    console.log('   4. Verifica que los emails lleguen correctamente')
    console.log('')
    console.log('üîó URLs importantes:')
    console.log('   - Recuperar contrase√±a: /auth/forgot-password')
    console.log('   - Reset directo: /auth/reset-password-direct')
    console.log('')
    console.log('üìß Endpoints de API:')
    console.log('   - POST /api/send-password-email-direct')
    console.log('   - POST /api/validate-reset-token')
    console.log('   - POST /api/update-password-direct')
    console.log('')
    
  } catch (error) {
    console.error('‚ùå Error en las pruebas:', error)
    console.log('')
    console.log('üîß Posibles soluciones:')
    console.log('   1. Verifica que todas las dependencias est√©n instaladas')
    console.log('   2. Aseg√∫rate de que el archivo .env.production existe')
    console.log('   3. Verifica la configuraci√≥n SMTP')
    console.log('   4. Revisa los logs de error para m√°s detalles')
  }
}

// Ejecutar pruebas
testDirectEmailService().then(() => {
  process.exit(0)
}).catch((error) => {
  console.error('Error fatal:', error)
  process.exit(1)
})